buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:' + androidGradleToolsVersion
    }
}

plugins {
    id "me.tatarka.retrolambda" version "3.2.2"
}
apply plugin: 'com.android.application'

repositories {
    jcenter()
    mavenCentral()
}

android {
    compileSdkVersion androidSDKVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId "org.robovm.store"
        minSdkVersion 16
        targetSdkVersion androidSDKVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23+'
    compile project(':core')

    androidTestCompile 'com.android.support:support-annotations:23.0.1'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
}

def getAdbPath() {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

   return path + "/platform-tools/adb"
}

task takeScreenshots() {
    dependsOn "connectedAndroidTestDebug"
    println("Note: Animations MUST BE disabled, go to ->Settings -> Developer Options and disable them.")
    println("This note is always shown:)")
}

task pullScreenshots() {
    dependsOn takeScreenshots
    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'cmd', '/C' + getAdbPath(), 'shell', 'echo', '$EXTERNAL_STORAGE'
            standardOutput = stdout;
        }

        def extStorage = stdout.toString()
        def pathOnDevice = extStorage.toString().trim() + "/screenshot"

        exec {
            commandLine 'cmd', '/C' + getAdbPath(), 'pull', pathOnDevice, "$projectDir/screenshot"
        }
    }
}
